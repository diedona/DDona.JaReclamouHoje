# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - src/frontend

variables:
  - name: backendProjectSrc
    value: 'src/backend/**/*.csproj'
  - name: vmImageLinux
    value: 'ubuntu-latest'
    
    # necessário pra rodar as sql migrations
  - name: vmImageWindows
    value: 'windows-latest'

stages:
  - stage: DEV
    jobs:
      - job: CI
        pool:
          vmImage: $(vmImageLinux)
        displayName: 'CI'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Restaurando'
            inputs:
              command: 'restore'
              projects: $(backendProjectSrc)
              feedsToUse: 'select'
          - task: DotNetCoreCLI@2
            displayName: 'Fazendo Build'
            inputs:
              command: 'build'
              projects: $(backendProjectSrc)
          - task: DotNetCoreCLI@2
            displayName: 'Rodando Testes de Unidade'
            inputs:
              command: 'test'
              projects: '$(backendProjectSrc)'
              testRunTitle: 'Executando testes'
          - task: DotNetCoreCLI@2
            displayName: 'Gerando Publish'
            inputs:
              command: 'publish'
              publishWebProjects: true
              arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
          - task: DotNetCoreCLI@2
            displayName: manifesto
            inputs:
              command: custom
              custom: 'new '
              arguments: tool-manifest              
          - task: DotNetCoreCLI@2
            displayName: Instalando EF Tool
            inputs:
              command: custom
              custom: 'tool '
              arguments: install dotnet-ef
          - task: DotNetCoreCLI@2
            displayName: 'Gerando script sql'
            inputs:
              command: 'custom'
              custom: 'ef'
              # IMPORTANTE: precisa do --idempotent para checar se o objeto não existe antes de criar!
              arguments: migrations script --output $(Build.ArtifactStagingDirectory)/SQL/scripts.sql --idempotent --project $(Build.SourcesDirectory)/src/backend/DDona.JaReclamouHoje.Api/DDona.JaReclamouHoje.Api.csproj
          - task: PublishBuildArtifacts@1
            displayName: 'Enviando arquivos APP'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'

      - job: CD_App
        dependsOn: CI
        condition: succeeded()
        pool:
          vmImage: $(vmImageLinux)
        displayName: 'CD App'
        steps:
          - task: Docker@2
            displayName: 'login docker'
            inputs:
              containerRegistry: 'docker-registry'
              command: 'login'
          - task: Docker@2
            inputs:
              containerRegistry: 'docker-registry'
              repository: 'ja-reclamou-hoje-api'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              buildContext: '$(Build.Repository.LocalPath)'
              tags: 'JaReclamouHojeApi_$(Build.BuildId)'
          - task: DownloadBuildArtifacts@1
            displayName: 'Download dos artefatos APP'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              itemPattern: '**/*.zip' # apenas a aplicação (que foi zipada)
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: AzureRmWebAppDeployment@4
            displayName: 'deploy azure'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Pago pelo Uso(7846457b-4101-4623-8ce2-132a758e68e3)'
              appType: 'webAppLinux'
              WebAppName: 'ja-reclamou-hoje'
              packageForLinux: '$(System.ArtifactsDirectory)/**/*.zip'
              RuntimeStack: 'DOTNETCORE|6.0'

      - job: CD_Db
        dependsOn: CI
        condition: succeeded()
        pool:
          vmImage: $(vmImageWindows)
        displayName: 'CD Database'
        steps:
          - task: DownloadBuildArtifacts@1
            displayName: 'Download dos artefatos SQL'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              itemPattern: '**/*.sql' # apenas a migration
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: SqlAzureDacpacDeployment@1
            inputs:
              azureSubscription: 'Pago pelo Uso(7846457b-4101-4623-8ce2-132a758e68e3)'
              AuthenticationType: 'server'
              ServerName: '$(sqlServerName)'
              DatabaseName: '$(sqlDatabaseName)'
              SqlUsername: '$(sqlUserName)'
              SqlPassword: '$(sqlPassword)'
              deployType: 'SqlTask'
              SqlFile: '$(System.ArtifactsDirectory)/drop/SQL/scripts.sql'
              IpDetectionMethod: 'AutoDetect'